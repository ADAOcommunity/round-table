apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ $.Chart.Name }}"
  namespace: {{ .Values.namespace }}
  labels:
    app: "{{ $.Chart.Name }}"
    service: "{{ .Values.labels.service }}"
spec:
  selector:
    matchLabels:
      app: "{{ $.Chart.Name }}"
      service: "{{ .Values.labels.service }}"
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: "{{ $.Chart.Name }}"
        service: "{{ .Values.labels.service }}"
    spec:
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      containers:
        - name: app
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          envFrom:
            - configMapRef:
                name: "{{ $.Chart.Name }}-configmap"
          livenessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 1
            periodSeconds: 10
          resources:
            limits:
              memory: 4192Mi
              cpu: 600m
            requests:
              cpu: 50m
              memory: 256Mi
          ports:
            - name: node
              containerPort: 3000
              protocol: TCP